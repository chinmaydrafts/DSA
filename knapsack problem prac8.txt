#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;

struct Item
{
    int weight;
    int value;
};

struct Node
{
    int level;
    int profit;
    int weight;
    float bound;
};

bool cmp(Item a, Item b)
{
    double r1 = (double)a.value / a.weight;
    double r2 = (double)b.value / b.weight;
    return r1 > r2;
}

float bound(Node u, int n, int W, vector<Item>& items)
{
    if (u.weight >= W)
    {
        return 0;
    }

    float profitBound = u.profit;
    int j = u.level + 1;
    int totWeight = u.weight;

    while (j < n && totWeight + items[j].weight <= W)
    {
        totWeight += items[j].weight;
        profitBound += items[j].value;
        j++;
    }

    if (j < n)
    {
        profitBound += (W - totWeight) * ((float)items[j].value / items[j].weight);
    }

    return profitBound;
}

int knapsack(int W, vector<Item>& items, int n)
{
    sort(items.begin(), items.end(), cmp);

    queue<Node> Q;
    Node u, v;
    u.level = -1;
    u.profit = u.weight = 0;
    Q.push(u);

    int maxProfit = 0;

    while (!Q.empty())
    {
        u = Q.front();
        Q.pop();

        if (u.level == n - 1)
        {
            continue;
        }

        v.level = u.level + 1;
        v.weight = u.weight + items[v.level].weight;
        v.profit = u.profit + items[v.level].value;

        if (v.weight <= W && v.profit > maxProfit)
        {
            maxProfit = v.profit;
        }

        v.bound = bound(v, n, W, items);

        if (v.bound > maxProfit)
        {
            Q.push(v);
        }

        v.weight = u.weight;
        v.profit = u.profit;
        v.bound = bound(v, n, W, items);

        if (v.bound > maxProfit)
        {
            Q.push(v);
        }
    }

    return maxProfit;
}

int main()
{
    int W = 50;
    vector<Item> items = {
        {10, 60},
        {20, 100},
        {30, 120}
    };
    int n = items.size();

    cout << "Maximum profit = " << knapsack(W, items, n) << endl;

    return 0;
}

