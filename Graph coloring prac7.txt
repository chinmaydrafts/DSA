#include <iostream>
#include <vector>
using namespace std;

bool isSafe(int node, vector<vector<int>>& graph, vector<int>& color, int c)
{
    for (int i = 0; i < graph.size(); i++)
    {
        if (graph[node][i] && color[i] == c)
        {
            return false;
        }
    }
    return true;
}

bool graphColoringUtil(vector<vector<int>>& graph, int m, vector<int>& color, int node)
{
    if (node == graph.size())
    {
        return true;
    }

    for (int c = 1; c <= m; c++)
    {
        if (isSafe(node, graph, color, c))
        {
            color[node] = c;

            if (graphColoringUtil(graph, m, color, node + 1))
            {
                return true;
            }

            color[node] = 0;
        }
    }
    return false;
}

void graphColoring(vector<vector<int>>& graph, int m)
{
    vector<int> color(graph.size(), 0);

    if (graphColoringUtil(graph, m, color, 0))
    {
        cout << "Coloring of nodes: ";
        for (int c : color)
        {
            cout << c << " ";
        }
        cout << endl;
    }
    else
    {
        cout << "No solution exists." << endl;
    }
}

int main()
{
    vector<vector<int>> graph = {
        {0, 1, 1, 1},
        {1, 0, 1, 0},
        {1, 1, 0, 1},
        {1, 0, 1, 0}
    };
    int m = 3;

    graphColoring(graph, m);

    return 0;
