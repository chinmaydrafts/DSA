#include <iostream>
#include <vector>
using namespace std;

class Solution {
public:
    /*
     * Function to implement Bellman Ford
     * edges: vector of vectors which represents the graph
     * S: source vertex to start traversing graph with
     * V: number of vertices
     */
    vector<int> bellman_ford(int V, vector<vector<int>>& edges, int S) {
        vector<int> dist(V, 1e8);
        dist[S] = 0;
        for(int i = 0; i < V - 1; i++) {
            for(auto it : edges) {
                int u = it[0];
                int v = it[1];
                int wt = it[2];
                if(dist[u] != 1e8 && dist[u] + wt < dist[v]) {
                    dist[v] = dist[u] + wt;
                }
            }
        }

        // Nth relaxation to check negative cycle
        for(auto it : edges) {
            int u = it[0];
            int v = it[1];
            int wt = it[2];
            if(dist[u] != 1e8 && dist[u] + wt < dist[v]) {
                return {-1};
            }
        }

        return dist;
    }
};

int main() {
    int V = 5; // Number of vertices
    vector<vector<int>> edges = {
        {0, 1, -1},
        {0, 2, 4},
        {1, 2, 3},
        {1, 3, 2},
        {1, 4, 2},
        {3, 2, 5},
        {3, 1, 1},
        {4, 3, -3}
    };
    int S = 0; // Source vertex

    Solution obj;
    vector<int> result = obj.bellman_ford(V, edges, S);

    if(result.size() == 1 && result[0] == -1) {
        cout << "Negative weight cycle detected" << endl;
    } else {
        cout << "Shortest distances from source " << S << ":" << endl;
        for(int i = 0; i < V; i++) {
            cout << "Vertex " << i << ": ";
            if(result[i] == 1e8)
                cout << "INF";
            else
                cout << result[i];
            cout << endl;
        }
    }

    return 0;
}